%% CS 528 Final Project
%% TrueForm Data Analysis
[dataset, labels] = importCSVFromDirectory("/Users/larry/git/CS528/TrueForm/Data");
sortedDataset = sortDataset(dataset);

swingTimestamps1 = swingBreakdown(sortedDataset, 1);
[accel1, gyro1] = swingAnalysis(sortedDataset, 1, swingTimestamps1);

swingTimestamps2 = swingBreakdown(sortedDataset, 2);
[accel2, gyro2] = swingAnalysis(sortedDataset, 2, swingTimestamps2);

swingTimestamps3 = swingBreakdown(sortedDataset, 3);
[accel3, gyro3] = swingAnalysis(sortedDataset, 3, swingTimestamps3);

swingTimestamps4 = swingBreakdown(sortedDataset, 4);
[accel4, gyro4] = swingAnalysis(sortedDataset, 4, swingTimestamps4);

figure;
hold on;
scatter(accel1, gyro1, "red");
scatter(accel2, gyro2, "red");
scatter(accel3, gyro3, "green");
scatter(accel4, gyro4, "green");
xlabel("Acceleration Mean Z");
ylabel("Gyro Mean X+Y");
hold off;

% plotDataset(sortedDataset);
% sync2 = performTimeSync(sortedDataset, 3, 3, 2, 2, 3);
% sync = performTimeSync(sortedDataset, 3, 3, 3, 2, 3);
% 
% scatter(sync(:, 1), sync(:, 2), [])
% hold on
% scatter(sync2(:, 1), sync2(:, 2), [], 'red')

%% Plot Dataset %%
function plotDataset(sortedDataset)
for datasetNumber = 1:size(sortedDataset,2) % there are 4 sets of data
    figure;
    tiledlayout(3, 1);

    for sensorNumber = 1:size(sortedDataset,1)
        graph = nexttile;
        
        switch sensorNumber
            case 1
                title("Accelerometer");
            case 2
                title("Attitude");
            case 3
                title("Gyroscope");
        end

        xlabel("Timestamp");
        ylabel("Amplitude");

        hold on;

        for sensorAxis = 2:size(sortedDataset{sensorNumber,datasetNumber},2)
            plot(sortedDataset{sensorNumber,datasetNumber}(:,1), sortedDataset{sensorNumber,datasetNumber}(:,sensorAxis))
        end

        switch sensorNumber
            case 1
                legend(graph, {'X', 'Y', 'Z'});
            case 2
                legend(graph, {'Pitch', 'Roll', 'Yaw'});
            case 3
                legend(graph, {'X', 'Y', 'Z'});
        end

        hold off;
    end
end
end

%% Import CSV Dataset %%
function [dataset, labels] = importCSVFromDirectory(directory)

% Imports CSV files from a directory path

dataset = [];
labels = [];

files = dir(directory);
for i = 1:length(files)
    file = files(i).name;
    datasetNumber = str2double(file(1));

    if length(file) > 8 && extractBetween(file, 3, 7) == "Accel"
        dataset{1,datasetNumber} = ProcessCSV(file, [2, Inf], ["Timestamp", "X", "Y", "Z"]);
        labels{1,datasetNumber} = file;
    elseif length(file) > 8 && extractBetween(file, 3, 7) == "Attit"
        dataset{2,datasetNumber} = ProcessCSV(file, [2, Inf], ["Timestamp", "Pitch", "Roll", "Yaw"]);
        labels{2,datasetNumber} = file;
    elseif length(file) > 8 && extractBetween(file, 3, 6) == "Gyro"
        dataset{3,datasetNumber} = ProcessCSV(file, [2, Inf], ["Timestamp", "X", "Y", "Z"]);
        labels{3,datasetNumber} = file;
    end
end

end

%% Process CSV Dataset
function Output = ProcessCSV(filename, dataLines, variableNames)
%IMPORTFILE Import data from a text file
%  ACCEL20220428133802GOOD = IMPORTFILE(FILENAME) reads data from text
%  file FILENAME for the default selection.  Returns the numeric data.
%
%  ACCEL20220428133802GOOD = IMPORTFILE(FILE, DATALINES) reads data for
%  the specified row interval(s) of text file FILENAME. Specify
%  DATALINES as a positive scalar integer or a N-by-2 array of positive
%  scalar integers for dis-contiguous row intervals.
%
%  Example:
%  Accel20220428133802Good = importfile("/Users/larry/git/CS528/TrueForm/Data/Accel-2022-04-28_13:38:02_Good.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 28-Apr-2022 14:24:26

disp(filename);

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 4);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = variableNames;
opts.VariableTypes = ["double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
Output = readtable(filename, opts);

%% Convert to output type
Output = table2array(Output);
end

%% Sort Dataset %%
function newDataset = sortDataset(dataset)
    for i = 1:size(dataset, 1)
        for j = 1:size(dataset, 2)
            newDataset{i,j} = sortrows(dataset{i,j}, 1);
        end
    end
end

%% Time Synchronization %%
function timeSync = performTimeSync(sortedDataset, rowIdxOne, rowIdxTwo, colIdx, ftOneIdx, ftTwoIdx)
    % sortedDataset is the sorted dataset by timestamps
    % rowIdxOne is the index of the row in sortedDataset of the first
    % feature, where 1 = accel, 2 = attitude, 3 = gyro
    % rowIdxTwo is the same for the second feature
    % colIdx is which trial to do
    % ftOneIdx is the index of the first feature's column in
    % sortedDataset[rowIdxOne][colIdx]
    % ftTwoIdx is the same for the second featured
    featureOne = cell2mat(sortedDataset(rowIdxOne, colIdx));
    featureOne(:, 1) = round(featureOne(:,1), 5);

    featureTwo = cell2mat(sortedDataset(rowIdxTwo, colIdx));
    featureTwo(:, 1) = round(featureTwo(:,1), 5);

    [~, idxOne] = intersect(featureOne(:,1), featureTwo);
    [~, idxTwo] = intersect(featureTwo(:,1), featureOne);

    syncFeatureOne = featureOne(idxOne, :);
    syncFeatureTwo = featureTwo(idxTwo, :);

    ftOneOut = syncFeatureOne(:, ftOneIdx);
    ftTwoOut = syncFeatureTwo(:, ftTwoIdx);
    timeSync = [ftOneOut, ftTwoOut];
end

%% Swing Breakdown %%
function swings = swingBreakdown(sortedDataset, entryNumber)
   % Swings are identified by Gyroscope Z axis rotation.
   % Each full swing consists of a forward swing + backward swing.
   % A zero-crossing indicates the end of a partial swing.
   % Solution: Find zero-crossings on positive slopes to get full swing?
   % borrowing code from A2 to find mean-crossing rate

   % 30Hz, so 30 samples per second
   % cut off 1 second from the beginning, 0.5 seconds from the end

   gyroTS = sortedDataset{3, entryNumber}(30:end-15,1);
   gyroZ = sortedDataset{3, entryNumber}(30:end-15,4);

   zeroCrossingsIndices = find(diff(sign(gyroZ)));
   zeroCrossingsTimestamps = gyroTS(zeroCrossingsIndices);

   swings = zeroCrossingsTimestamps;
end

%% Swing Analysis
function [swingAnalysisAccelZ, swingAnalysisGyroXY] = swingAnalysis(sortedDataset, entryNumber, swingTimestamps)

    % break down into sensors
    accelTS = sortedDataset{1,entryNumber}(:,1);
    accelZ = sortedDataset{1,entryNumber}(:,4);
    
    gyroTS = sortedDataset{3,entryNumber}(:,1);
    gyroX = sortedDataset{3,entryNumber}(:,2);
    gyroY = sortedDataset{3,entryNumber}(:,3);

    swingAnalysisAccelZ = [];
    swingAnalysisGyroXY = [];

    % group data into swingTimestamps intervals
    for i = 1:length(swingTimestamps)-1
        % find closest matching accel TSs
        accelStart = find(accelTS >= swingTimestamps(i,1), 1, 'first');
        accelEnd = find(accelTS < swingTimestamps(i+1,1), 1, 'last');

        % get gyroTSs
        gyroStart = find(gyroTS == swingTimestamps(i,1), 1, 'first');
        gyroEnd = find(gyroTS == swingTimestamps(i+1,1), 1, 'first');

        % analysis
        swingAnalysisAccelZ = [swingAnalysisAccelZ; abs(mean(accelZ(accelStart:accelEnd, 1)))];
        swingAnalysisGyroXY = [swingAnalysisGyroXY; mean(abs(gyroX(gyroStart:gyroEnd, 1)) + abs(gyroY(gyroStart:gyroEnd, 1)))];
    end

end
